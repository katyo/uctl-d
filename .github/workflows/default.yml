name: CI
on:
  push:
    branches:
      - master
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  pull_request:
jobs:
  check:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            dscanner: 0.11.0
            reporter: github-check
            level: warning
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup reviewdog
        uses: reviewdog/action-setup@v1
      - name: Setup D scanner
        run: curl -L https://github.com/dlang-community/D-Scanner/releases/download/v${{ matrix.dscanner }}/dscanner-v${{ matrix.dscanner }}-linux-x86_64.tar.gz | sudo tar -xz -C /usr/bin
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Check style
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ github.token }}
        run: 'dscanner --styleCheck | reviewdog -efm="%f(%l:%c)[%tarn]: %m" -efm="%f(%l:%c)[%trror]: %m" -name="Coding style" -reporter="${{ matrix.reporter }}" -level="${{ matrix.level }}"'

  build-doc:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            adrdox: 2.4.1
    runs-on: ubuntu-latest
    steps:
      - name: Prepare config
        id: config
        run: |
          echo "::set-output name=outdir::$(printf '${{ github.ref }}' | sed 's/.*\/\([^\/]*\)$/\1/g')"
      - name: Setup adrdox
        run: |
          curl -L https://github.com/katyo/adrdox/releases/download/v${{ matrix.adrdox }}/adrdox_linux-x86_64.zip > ${{ runner.temp }}/adrdox.zip
          sudo unzip ${{ runner.temp }}/adrdox.zip -d /usr/share/adrdox -x adrdox
          sudo unzip ${{ runner.temp }}/adrdox.zip -d /usr/bin adrdox
          sudo chmod +x /usr/bin/adrdox
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Build docs
        run: make doc
      - name: Publish docs
        if: github.event_name == 'push'
        uses: JamesIves/github-pages-deploy-action@3.6.2
        with:
          GITHUB_TOKEN: ${{ github.token }}
          BRANCH: gh-pages
          FOLDER: doc
          TARGET_FOLDER: ${{ steps.config.outputs.outdir }}

  build:
    needs:
      - check
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        target:
          - i686-linux-gnu
          - x86_64-linux-gnu
          - armv6-linux-gnueabi
          - armv7-linux-gnueabi
          - aarch64-linux-gnu
        dc:
          - ldc-latest
          - ldc-master
    runs-on: ${{ matrix.os }}
    steps:
      - run: sudo apt-get update
      - name: Setup cross linux toolchain
        if: contains(matrix.os, 'ubuntu') && contains(matrix.target, '-linux-') && !startsWith(matrix.target, 'x86_64')
        run: sudo apt-get install -y gcc-$(printf ${{ matrix.target }} | sed 's/arm[^-]*/arm/g')
      - name: Setup arm embedded toolchain
        if: contains(matrix.os, 'ubuntu') && contains(matrix.target, '-none-') && startsWith(matrix.target, 'arm')
        run: sudo apt-get install -y gcc-arm-none-eabi
      - name: Setup qemu user
        if: contains(matrix.os, 'ubuntu') && contains(matrix.target, '-linux-') && !startsWith(matrix.target, 'i686') && !startsWith(matrix.target, 'x86_64')
        run: sudo apt-get install -y qemu-user
      - name: Setup qemu system
        if: contains(matrix.os, 'ubuntu') && contains(matrix.target, '-none-') && !startsWith(matrix.target, 'i686') && !startsWith(matrix.target, 'x86_64')
        run: sudo apt-get install -y qemu-system-arm
      - name: Setup D compiler and tools
        uses: dlang-community/setup-dlang@v1
        with:
          compiler: ${{ matrix.dc }}
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Build tests
        run: make build TARGET=${{ matrix.target }}
      - name: Run tests native linux
        if: contains(matrix.os, 'ubuntu') && contains(matrix.target, '-linux-') && (startsWith(matrix.target, 'i686') || startsWith(matrix.target, 'x86_64'))
        run: make test TARGET=${{ matrix.target }}
      - name: Run tests cross linux arm
        if: contains(matrix.os, 'ubuntu') && contains(matrix.target, '-linux-') && (startsWith(matrix.target, 'arm') || startsWith(matrix.target, 'aarch64'))
        run: make test TARGET=${{ matrix.target }} RUNNER='qemu'
